// This file was auto-generated by prisma-generator-typescript-interfaces

export type Gender = "Male" | "Female" | "Other";

export type DataTest = "Apple" | "Banana" | "Orange" | "Pear";

export interface Person {
  id: DefinedInt;
  name: DefinedString;
  age: DefinedInt;
  email: DefinedString | null;
  gender: Gender;
  addressId: DefinedInt;
  address?: Address;
  friends?: Person[];
  friendsOf?: Person[];
  data?: Data | null;
}

export interface Address {
  id: DefinedInt;
  streetNumber: DefinedInt;
  streetName: DefinedString;
  city: DefinedString;
  isBilling: DefinedBoolean;
  people?: Person[];
}

export interface Data {
  id: DefinedString;
  stringField: DefinedString;
  booleanField: DefinedBoolean;
  intField: DefinedInt;
  floatField: DefinedFloat;
  jsonField: DefinedJson;
  dateField: DefinedDate;
  bigIntField: DefinedBigInt;
  decimalField: DefinedDecimal;
  bytesField: DefinedBytes;
  enumField: DataTest;
  optionalStringField: DefinedString | null;
  optionalBooleanField: DefinedBoolean | null;
  optionalIntField: DefinedInt | null;
  optionalFloatField: DefinedFloat | null;
  optionalJsonField: DefinedJson | null;
  optionalDateField: DefinedDate | null;
  optionalBigIntField: DefinedBigInt | null;
  optionalDecimalField: DefinedDecimal | null;
  optionalBytesField: DefinedBytes | null;
  optionalEnumField: DataTest | null;
  stringArrayField: DefinedString[];
  booleanArrayField: DefinedBoolean[];
  intArrayField: DefinedInt[];
  floatArrayField: DefinedFloat[];
  jsonArrayField: DefinedJson[];
  dateArrayField: DefinedDate[];
  bigIntArrayField: DefinedBigInt[];
  decimalArrayField: DefinedDecimal[];
  bytesArrayField: DefinedBytes[];
  enumArrayField: DataTest[];
  personId: DefinedInt;
  person?: Person;
}

type DefinedInt = number;

type DefinedString = string;

type DefinedBoolean = boolean | "true" | "false";

type DefinedFloat = [number, number];

type DefinedJson = { [k: string]: string | number | DefinedJson };

type DefinedDate = Date;

type DefinedBigInt = string & { isBigInt: true };

type DefinedDecimal = { valueOf: () => string };

type DefinedBytes = number[];
