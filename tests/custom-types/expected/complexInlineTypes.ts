// This file was auto-generated by prisma-generator-typescript-interfaces

export type Gender = "Male" | "Female" | "Other";

export type DataTest = "Apple" | "Banana" | "Orange" | "Pear";

export interface Person {
  id: string | number;
  name: { value: string };
  age: string | number;
  email: { value: string } | null;
  gender: Gender;
  addressId: string | number;
  address?: Address;
  friends?: Person[];
  friendsOf?: Person[];
  data?: Data | null;
}

export interface Address {
  id: string | number;
  streetNumber: string | number;
  streetName: { value: string };
  city: { value: string };
  isBilling: boolean | "true" | "false";
  people?: Person[];
}

export interface Data {
  id: { value: string };
  stringField: { value: string };
  booleanField: boolean | "true" | "false";
  intField: string | number;
  floatField: [number, number];
  jsonField: { [k: string]: string };
  dateField: string & { isDate: true };
  bigIntField: number & string;
  decimalField: Record<number, string>;
  bytesField: (s: string, n: number) => number[];
  enumField: DataTest;
  optionalStringField: { value: string } | null;
  optionalBooleanField: (boolean | "true" | "false") | null;
  optionalIntField: (string | number) | null;
  optionalFloatField: [number, number] | null;
  optionalJsonField: { [k: string]: string } | null;
  optionalDateField: (string & { isDate: true }) | null;
  optionalBigIntField: (number & string) | null;
  optionalDecimalField: Record<number, string> | null;
  optionalBytesField: ((s: string, n: number) => number[]) | null;
  optionalEnumField: DataTest | null;
  stringArrayField: { value: string }[];
  booleanArrayField: (boolean | "true" | "false")[];
  intArrayField: (string | number)[];
  floatArrayField: [number, number][];
  jsonArrayField: { [k: string]: string }[];
  dateArrayField: (string & { isDate: true })[];
  bigIntArrayField: (number & string)[];
  decimalArrayField: Record<number, string>[];
  bytesArrayField: ((s: string, n: number) => number[])[];
  enumArrayField: DataTest[];
  personId: string | number;
  person?: Person;
}
