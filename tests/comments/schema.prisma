// Test TypeScript comments generation from triple-slash comments

// ========================
// Generator Tests
// ========================

generator comments {
  provider        = "tsx src/generator.ts"
  output          = "comments.ts"
  includeComments = true
}

generator commentsPrettier {
  provider        = "tsx src/generator.ts"
  output          = "commentsPrettier.ts"
  includeComments = true
  prettier        = true
}

generator commentsWithOptions {
  provider        = "tsx src/generator.ts"
  output          = "commentsWithOptions.ts"
  includeComments = true
  modelType       = "type"
  enumType        = "enum"
  prettier        = true
}

generator noComments {
  provider        = "tsx src/generator.ts"
  output          = "noComments.ts"
  includeComments = false
}

// ========================
// Prisma Schema
// ========================

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// The status of a user account
enum UserStatus {
  /// User is active and can log in
  ACTIVE
  /// User is inactive and cannot log in
  INACTIVE
  /// User account is suspended
  SUSPENDED
}

/// Represents a user in the system
/// This model contains all user-related information
model User {
  /// The unique identifier for the user
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  /// The user's email address
  /// Must be unique across all users
  email     String     @unique
  /// The user's display name
  name      String?
  /// User account status
  status    UserStatus @default(ACTIVE)
  /// When the user account was created
  createdAt DateTime   @default(now())
  /// When the user account was last updated
  updatedAt DateTime   @updatedAt
  /// Posts created by this user
  posts     Post[]     @relation("UserPosts")
  /// User's profile information
  profile   Profile?
}

/// Extended profile information for a user
model Profile {
  /// The unique identifier for the profile
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  /// A short bio about the user
  bio    String?
  /// URL to the user's avatar image
  avatar String?
  /// The user this profile belongs to
  user   User    @relation(fields: [userId], references: [id])
  /// Reference to the user
  userId String  @unique @db.ObjectId
}

/// A blog post written by a user
model Post {
  /// The unique identifier for the post
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  /// The title of the post
  /// Should be descriptive and engaging
  title     String
  /// The main content of the post
  /// Can contain markdown formatting
  content   String
  /// Whether the post is published and visible to readers
  published Boolean  @default(false)
  /// When the post was created
  createdAt DateTime @default(now())
  /// When the post was last updated
  updatedAt DateTime @updatedAt
  /// The author of this post
  author    User     @relation("UserPosts", fields: [authorId], references: [id])
  /// Reference to the author
  authorId  String   @db.ObjectId
}

/// Represents an address
/// Used for MongoDB composite types
type Address {
  /// Street name and number
  street  String
  /// City name
  city    String
  /// State or province
  state   String
  /// Postal or ZIP code
  zipCode String
  /// Country name
  country String
}
