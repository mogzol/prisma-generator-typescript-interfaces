// These tests cover most of the generator's options

// ========================
// Generator Tests
// ========================

// Unlike other tests, this one should output to the default "interfaces.ts"
generator noOptions {
  provider = "tsx src/generator.ts"
}

generator customOutput {
  provider = "tsx src/generator.ts"
  output   = "customOutput.ts"
}

generator defaultsSpecified {
  provider    = "tsx src/generator.ts"
  output      = "defaultsSpecified.ts"
  modelType   = "interface"
  enumType    = "stringUnion"
  dateType    = "Date"
  bigIntType  = "bigint"
  decimalType = "Decimal"
  bytesType   = "Uint8Array"
}

generator customHeader {
  provider      = "tsx src/generator.ts"
  output        = "customHeader.ts"
  headerComment = "This is a custom header"
}

generator noHeader {
  provider      = "tsx src/generator.ts"
  output        = "noHeader.ts"
  headerComment = ""
}

generator multilineHeader {
  provider      = "tsx src/generator.ts"
  output        = "multilineHeader.ts"
  headerComment = "This is a multiline header\nwith a second line\n  and a third line indented\nand emoji ðŸŽ‰"
}

generator formatPrettier {
  provider = "tsx src/generator.ts"
  output   = "formatPrettier.ts"
  prettier = true
}

generator requiredRelations {
  provider  = "tsx src/generator.ts"
  output    = "requiredRelations.ts"
  relations = "required"
}

generator omitRelations {
  provider  = "tsx src/generator.ts"
  output    = "omitRelations.ts"
  relations = "none"
}

generator requiredCounts {
  provider = "tsx src/generator.ts"
  output   = "requiredCounts.ts"
  counts   = "required"
}

generator optionalCounts {
  provider = "tsx src/generator.ts"
  output   = "optionalCounts.ts"
  counts   = "optional"
}

// Without relations, counts should not be included
generator countsNoRelations {
  provider  = "tsx src/generator.ts"
  output    = "countsNoRelations.ts"
  relations = "none"
  counts    = "optional"
}

generator optionalNullables {
  provider          = "tsx src/generator.ts"
  output            = "optionalNullables.ts"
  optionalNullables = true
}

// Note that optionalNullables takes priority for a nullable relation.
generator optionalNullablesRequiredRelations {
  provider          = "tsx src/generator.ts"
  output            = "optionalNullablesRequiredRelations.ts"
  optionalNullables = true
  relations         = "required"
}

generator optionalDefaults {
  provider         = "tsx src/generator.ts"
  output           = "optionalDefaults.ts"
  optionalDefaults = true
}

generator optionalDefaultsAndNullables {
  provider          = "tsx src/generator.ts"
  output            = "optionalDefaultsAndNullables.ts"
  optionalDefaults  = true
  optionalNullables = true
}

generator prefixSuffix {
  provider    = "tsx src/generator.ts"
  output      = "prefixSuffix.ts"
  enumPrefix  = "enum"
  enumSuffix  = "Enum"
  modelPrefix = "model"
  modelSuffix = "Model"
}

generator stringTypes {
  provider    = "tsx src/generator.ts"
  output      = "stringTypes.ts"
  dateType    = "string"
  bigIntType  = "string"
  decimalType = "string"
  bytesType   = "string"
}

generator numberTypes {
  provider    = "tsx src/generator.ts"
  output      = "numberTypes.ts"
  dateType    = "number"
  bigIntType  = "number"
  decimalType = "number"
  bytesType   = "number[]"
}

generator bytesBuffer {
  provider  = "tsx src/generator.ts"
  output    = "bytesBuffer.ts"
  bytesType = "Buffer"
}

generator enumType {
  provider = "tsx src/generator.ts"
  output   = "enumType.ts"
  enumType = "enum"
}

generator enumExportFalse {
  provider    = "tsx src/generator.ts"
  output      = "enumExportFalse.ts"
  enumType    = "enum"
  exportEnums = false
}

generator enumTypePrefixSuffix {
  provider   = "tsx src/generator.ts"
  output     = "enumTypePrefixSuffix.ts"
  enumType   = "enum"
  enumPrefix = "e"
  enumSuffix = "Enum"
}

generator enumTypeObject {
  provider = "tsx src/generator.ts"
  output   = "enumTypeObject.ts"
  enumType = "object"
}

generator enumExportFalseTypeObject {
  provider    = "tsx src/generator.ts"
  output      = "enumExportFalseTypeObject.ts"
  enumType    = "object"
  exportEnums = false
}

generator enumTypeObjectPrefixSuffix {
  provider   = "tsx src/generator.ts"
  output     = "enumTypeObjectPrefixSuffix.ts"
  enumType   = "object"
  enumPrefix = "e"
  enumSuffix = "Enum"
}

generator enumTypeObjectValuePrefixSuffix {
  provider         = "tsx src/generator.ts"
  output           = "enumTypeObjectValuePrefixSuffix.ts"
  enumType         = "object"
  enumPrefix       = "e"
  enumSuffix       = "Enum"
  enumObjectPrefix = "$"
  enumObjectSuffix = "Obj"
}

generator modelType {
  provider  = "tsx src/generator.ts"
  output    = "modelType.ts"
  modelType = "type"
}

// ========================
// Prisma Schema
// ========================

datasource db {
  provider = "postgresql"
  url      = ""
}

enum Gender {
  Male
  Female
  Other
}

enum DataTest {
  Apple
  Banana
  Orange
  Pear
}

model Person {
  id        Int      @id @default(autoincrement())
  name      String
  age       Int
  email     String?
  gender    Gender
  addressId Int
  address   Address  @relation(fields: [addressId], references: [id])
  friends   Person[] @relation("Friends")
  friendsOf Person[] @relation("Friends")
  data      Data?
}

model Address {
  id           Int      @id
  streetNumber Int
  streetName   String
  city         String
  isBilling    Boolean  @default(false)
  people       Person[]
}

model Data {
  id           String   @id @default(uuid()) @db.Uuid
  stringField  String
  booleanField Boolean  @default(true)
  intField     Int      @default(42)
  bigIntField  BigInt
  floatField   Float
  decimalField Decimal
  dateField    DateTime @default(now())
  jsonField    Json
  bytesField   Bytes
  enumField    DataTest

  optionalStringField  String?
  optionalBooleanField Boolean?
  optionalIntField     Int?
  optionalBigIntField  BigInt?
  optionalFloatField   Float?
  optionalDecimalField Decimal?  @default(12.34)
  optionalDateField    DateTime?
  optionalJsonField    Json?
  optionalBytesField   Bytes?
  optionalEnumField    DataTest?

  stringArrayField  String[]   @default(["hello", "world"])
  booleanArrayField Boolean[]
  intArrayField     Int[]
  bigIntArrayField  BigInt[]
  floatArrayField   Float[]
  decimalArrayField Decimal[]
  dateArrayField    DateTime[]
  jsonArrayField    Json[]
  bytesArrayField   Bytes[]
  enumArrayField    DataTest[]

  personId Int    @unique
  person   Person @relation(fields: [personId], references: [id])
}
