// This file was auto-generated by prisma-generator-typescript-interfaces

import {
  CustomArrayFieldType,
  CustomFieldType,
  DateArrayType,
  ImportedBoolean,
  JsonValue,
  OptionalCustomFieldType,
} from "../types.js";

export type Gender = "Male" | "Female" | "Other";

export interface Person {
  id: DefinedInt;
  name: "constant string";
  age: DefinedInt;
  email: "constant string" | null;
  gender: Gender;
  addressId: DefinedInt;
  address?: Address;
  friendsOf?: Person[];
  friends?: Person[];
  data?: Data | null;
}

export interface Address {
  id: DefinedInt;
  streetNumber: DefinedInt;
  streetName: "constant string";
  city: MyString;
  isBilling: ImportedBoolean;
  people?: Person[];
}

export interface Data {
  id: "constant string";
  stringField: "constant string";
  booleanField: ImportedBoolean;
  intField: DefinedInt;
  bigIntField: bigint | number;
  floatField: DefinedCustomType;
  decimalField: Decimal;
  dateField: Date;
  jsonField: DefinedInt;
  bytesField: ImportedBoolean;
  customField: CustomFieldType;
  optionalStringField: (string & { extra: unknown }) | null;
  optionalBooleanField: MyString | null;
  optionalIntField: BigInt | null;
  optionalBigIntField: Record<string, { [key: string]: unknown }> | null;
  optionalFloatField: number | null;
  optionalDecimalField: Decimal | null;
  optionalDateField: Date | null;
  optionalJsonField: JsonValue | null;
  optionalBytesField: Uint8Array | null;
  optionalCustomField: OptionalCustomFieldType | null;
  stringArrayField: string & { customString: true };
  booleanArrayField: boolean | "true" | "false";
  intArrayField: DefinedArrayType[];
  bigIntArrayField: DefinedArrayType[];
  floatArrayField: DefinedArrayType;
  decimalArrayField: LiteralDefinedArrayType;
  dateArrayField: DateArrayType;
  jsonArrayField: JsonValue[];
  bytesArrayField: Uint8Array[];
  customArrayField: CustomArrayFieldType[];
  personId: DefinedInt;
  person?: Person;
}

type DefinedInt = number;

type MyString = string & { isString: true };

type DefinedCustomType = string | number;

type Decimal = { valueOf(): string };

type DefinedArrayType = { isInt: "true"; value: number };

type LiteralDefinedArrayType = unknown;
