// Test against mongodb schema to allow testing composite types
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#defining-composite-types

// ========================
// Generator Tests
// ========================

generator mongoTypes {
  provider = "tsx src/generator.ts"
  output   = "mongoTypes.ts"
}

// Ensure modelType = "type" also applies to `type` definitions
generator mongoModelType {
  provider  = "tsx src/generator.ts"
  output    = "mongoModelType.ts"
  modelType = "type"
}

// Ensure relations = "none" does not apply to `type` definitions
generator mongoOmitRelations {
  provider  = "tsx src/generator.ts"
  output    = "mongoOmitRelations.ts"
  relations = "none"
}

// Ensure count does include `type` definitions
generator mongoCountRelations {
  provider = "tsx src/generator.ts"
  output   = "mongoCountRelations.ts"
  counts   = "optional"
}

generator prefixSuffix {
  provider   = "tsx src/generator.ts"
  output     = "prefixSuffix.ts"
  typePrefix = "type"
  typeSuffix = "Type"
}

// ========================
// Prisma Schema
// ========================

datasource db {
  provider = "mongodb"
  url      = ""
}

enum Gender {
  Male
  Female
  Other
}

enum PhotoType {
  Selfie
  Profile
  Tagged
}

model Person {
  id        Int     @id @map("_id")
  name      String
  gender    Gender
  addressId Int
  address   Address @relation(fields: [addressId], references: [id])
  photos    Photo[]
  tags      Tag?
}

model Address {
  id          Int      @id @map("_id")
  addressText String
  people      Person[]
}

type Photo {
  height Int
  Width  Int
  url    String
  type   PhotoType
}

type Tag {
  id   Int
  name String
}
